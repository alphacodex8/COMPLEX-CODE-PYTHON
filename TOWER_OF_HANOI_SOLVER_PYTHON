import time

lstA = []
lstB = []
lstC = []

lsts = [lstA, lstB, lstC]

lstF = []

no = int(input("Enter number of tiles: "))

for i in range(no):
    lstA.append(i+1)
    lstF.append(i+1)

def result():
    print("A:", lstA)
    print("B:", lstB)
    print("C:", lstC, "\n")
    print("Moves: ", moves)
    print("startcount", start_count)
    print("lstcount: ", lst_count)
    print("tilecount: ", tile_count)
    print("lstcheck", lst_check, "\n")
    #time.sleep(0.5)

tile_count = 0 # counts tile to be placed
lst_count = 0 # count lst-1 or lst-2 to be placed in
start_count = 0 # checks lst containing tile
lst_check = 0 # checks if all lsts checked for availability once
moves = 0
var = 0 # sets lst_count to start_count

result()

while True:
    
    if lstF[tile_count] in lsts[start_count]: # to find which lst is the tile in

        if lsts[start_count].index(lstF[tile_count])==0: # if tile is topmost in lst

            if var==0:
                lst_count=start_count
                var=1
             
            if lst_count+1<=2: # if lst_count is A or B 
                
                if len(lsts[lst_count+1])==0 or lsts[lst_count+1][0]>lstF[tile_count]: # if next lst is empty or topmost tile of next list is greater that tile
                    lsts[lst_count+1].insert(0, lstF[tile_count])
                    lsts[start_count].remove(lstF[tile_count])
                    moves+=1
                    result()
                    
                    if tile_count+1==no:
                        tile_count=0

                    else:
                        tile_count+=1
                    
                    # resetting variables
                    lst_check=0
                    lst_count=0
                    start_count=0
                    var=0

                else: # if next lst not available, check next to next lst
                        
                    if lst_check+1<=3:
                        lst_check+=1

                    else:
                        lst_check=0
                        tile_count=0
                    
                    if lst_count+1<=2:
                        lst_count+=1

                    else:
                        lst_count=0

            else: # if lst_count is C

                if len(lsts[0])==0 or lsts[0][0]>lstF[tile_count]: # if next lst is empty or topmost tile of next list is greater that tile
                    lsts[0].insert(0, lstF[tile_count])
                    lsts[start_count].remove(lstF[tile_count])
                    moves+=1
                    result()
                    
                    if tile_count+1==no:
                        tile_count=0

                    else:
                        tile_count+=1
                    
                    # resetting variables
                    lst_check=0
                    lst_count=0
                    start_count=0
                    var=0

                else: # if next lst not available, check next to next lst
                        
                    if lst_check+1<=3:
                        lst_check+=1

                    else:
                        lst_check=0
                        tile_count=0
                    
                    if lst_count+1<=2:
                        lst_count+=1

                    else:
                        lst_count=0
                    
        else: # if tile not topmost in lst, check next tile

            if tile_count+1==no:
                tile_count=0

            else:
                tile_count+=1

    else: # if tile not in lst, check next lst 

        if start_count+1<=2:
            start_count+=1

        else:
            start_count=0

    if lstB==lstF or lstC==lstF: # check end
        result()
        print("end")
        break
